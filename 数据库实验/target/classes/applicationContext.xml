<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


    <context:component-scan base-package="yyx">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--    Spring的配置文件，这里主要配置和业务逻辑有关的，比如数据源，事务控制等 -->

    <!--    引入外部配置文件-->
    <context:property-placeholder location="classpath:dbconfig.properties"/>

    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
        <property name="driverClass" value="${jdbc.driverClass}"></property>
        <property name="user" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!--    ================================================================================    -->

    <!--    配置与mybatis的整合-->



    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="pooledDataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>

        <property name="typeAliasesPackage" value="yyx.entity"/>
        <!--        指定mybatis的mapper的文件位置，扫描mapper下的所有xml文件-->
        <property name="mapperLocations" value="classpath*:*Mapper.xml"></property>
    </bean>

    <!--    配置扫描器，将mybatis接口的实现加入到ioc容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--        扫描所有的dao接口的实现，加入到ioc容器中-->
        <property name="basePackage" value="yyx.dao"></property>
    </bean>
    <!--    配置一个可以执行批量的sqlSession   -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>


    <!--    ================================================================================    -->

    <!--    Spring配置文件的核心点（数据源、与mybatis整合、事务控制）-->

    <!--    事务控制-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--        控制住数据源-->
        <property name="dataSource" ref="pooledDataSource"></property>
    </bean>

<!--    &lt;!&ndash;    开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式）&ndash;&gt;-->
<!--    <aop:config>-->
<!--        &lt;!&ndash;        切入点表达式      &ndash;&gt;-->
<!--        <aop:pointcut id="txPoint" expression="execution(* yyx.service..*(..))"/>-->
<!--        &lt;!&ndash;        配置事务增强      &ndash;&gt;-->
<!--        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>-->
<!--    </aop:config>-->

<!--    &lt;!&ndash;    配置事务增强，事务如何切入&ndash;&gt;-->
<!--    <tx:advice id="txAdvice">-->
<!--        <tx:attributes>-->
<!--            &lt;!&ndash;            *代表所有方法都是事务方法&ndash;&gt;-->
<!--            <tx:method name="*"/>-->
<!--            &lt;!&ndash;            以get开始的所有方法&ndash;&gt;-->
<!--            <tx:method name="get*" read-only="true"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->
</beans>